directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=list(directors), FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=directors, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=directors, FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=directors, FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
print(directors.df[1:10,])
View(directorCount)
View(directorCount)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=unlist(directors), FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=list(directors.df$director), FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=directors.df$director, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=directors, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=list(directors), FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = data.frame(director=unlist(directors))
directorCount = aggregate(directorCount$director, by=directorCount$director, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = data.frame(director=unlist(directors))
directorCount = aggregate(directorCount[1], by=directorCount[1], FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = data.frame(director=unlist(directors))
directorCount = aggregate(directorCount[1], by=directorCount[1], FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
print(directors.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
actorsDirFlatRating = c(actorsDirFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDIr.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
actorsDirFlatRating = c(actorsDirFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
if(!is.na(actors[[i]][j])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
actorsDirFlatRating = c(actorsDirFlatRating, ratings[i])
}
}
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
if(!is.na(actors[[i]][j])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
actorsDirFlatRating = c(actorsDirFlatRating, ratings[i])
}
}
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
if(!is.na(actors[[i]][j])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
out = lm(ratings ~ years)
print(summary(out))
years = as.numeric(years)
out = lm(ratings ~ years)
print(summary(out))
plot(out)
out = lm(numVotes ~ years)
print(summary(out))
plot(out)
plot(out)$2
plot(out)[2]
out = lm(sqrt(numVotes) ~ sqrt(years))
print(summary(out))
plot(out)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(out)
out = lm(ratings ~ years)
print(summary(out))
out = lm(ratings ~ years + numVotes + years*numVotes)
print(summary(out))
print(anova(out))
plot(out)
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ yearsStd + votesStd + yearsStd*votesStd)
print(summary(out))
print(anova(out))
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd +yearsStd + yearsStd*votesStd)
print(summary(out))
print(anova(out))
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd*votesStd + yearsStd )
print(summary(out))
print(anova(out))
mapply(sum, 1:4, 5:8, 9:12)
sapply(mtcars, FUN=mean)
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd*votesStd + yearsStd )
print(summary(out))
print(anova(out))
plot(out)
out = lm(ratings ~ years)
print(summary(out))
plot(out)
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method="lm", se=FALSE)
# Part 2: ggplot2 graphics
Use `ggplot2` to solve make several graphs. First, here's code to load, or install and load, the package.
```{r}
if (!require("ggplot2")) {
install.packages("ggplot2")
stopifnot(require("ggplot2"))
}
```
1. Consider the built-in data set `warpbreaks`. (See `?warpbreaks`, http://en.wikipedia.org/wiki/Warp_%28weaving%29, and http://en.wikipedia.org/wiki/Power_loom#Operation.) Make a histogram of the numbers of warp breaks.
```{r}
ggplot(data=warpbreaks, aes(x = breaks)) + geom_histogram()
```
2. Make a density plot of the numbers of warp breaks.
```{r}
ggplot(data=warpbreaks, aes(x = breaks)) + geom_density()
```
3. Make two density plots of warp breaks, using a different color for each wool type, on a single panel. Does the wool type have a strong effect on the number of breaks?
```{r}
ggplot(data=warpbreaks, aes(x = breaks, color=factor(wool))) + geom_density()
```
4. Make three density plots of warp breaks, using a different color for each tension level, on a single panel. How does tension seem to affect the number of breaks?
```{r}
ggplot(data=warpbreaks, aes(x = breaks, color=factor(tension))) + geom_density()
```
5. "Old Faithful" is a geyser in Yellowstone National Park that erupts on a remarkably regular schedule (http://en.wikipedia.org/wiki/Old_Faithful). Make a scatterplot of waiting time ($y$) vs. most recent eruption time ($x)$ from the built-in `faithful` data set. (See `?faithful`.) Include a simple linear regression line. What is the most striking feature of this plot?
```{r}
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method="lm", se=FALSE)
```
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method=c("lm"), se=FALSE)
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method=c("lm"), se=FALSE)
?faithful
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method=c("lm"), se=FALSE)
ggplot(data=warpbreaks, aes(x = breaks, color=factor(tension))) + geom_density()
ggplot(data=warpbreaks, aes(x = breaks, color=factor(wool))) + geom_density()
out = lm(numVotes ~ years)
print(summary(out))
plot(numVotes ~ years)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd + yearsStd*votesStd  )
print(summary(out))
print(anova(out))
plot(fitted(out), resid(out))
for(i in 1:250) {
}
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
index = identify(area$farm, area$land, tolerance = 5)
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd + yearsStd*votesStd  )
print(summary(out))
print(anova(out))
plot(fitted(out), resid(out))
index = identify(area$farm, area$land, tolerance = 5)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
index = identify(y=log(numVotes), x=log(years), tolerance = 5)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
index = identify(y=log(numVotes), x=log(years), tolerance = 5)
setwd("~/Spring 2016/Stat 775/HW 2")
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = runif(n = 1000, min=0, max=10)
lambda = runif(n = 1000, min=0, max=10)
likelihood = (1/(factorial(5)*factorial(2)))*((mu + lambda)^5)*((lambda)^2)*exp(-mu - 2*lambda)
df = data.frame(x=mu, y=lambda, z=likelihood)
df[which.max(df$z), ]
ggplot(df, aes(x=x, y=y, z=likelihood)) + stat_contour()
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
ggplot(df, aes(x=x, y=y, z=likelihood)) + stat_density2d()
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = runif(n = 1000, min=0, max=5)
lambda = runif(n = 1000, min=0, max=5)
likelihood = (1/(factorial(5)*factorial(2)))*((mu + lambda)^5)*((lambda)^2)*exp(-mu - 2*lambda)
df = data.frame(x=mu, y=lambda, z=likelihood)
df[which.max(df$z), ]
ggplot(df, aes(x=x, y=y, z=likelihood)) + stat_density2d()
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
+ geom_point(aes(color=z))
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = runif(n = 1000, min=0, max=5)
lambda = runif(n = 1000, min=0, max=5)
likelihood = (1/(factorial(5)*factorial(2)))*((mu + lambda)^5)*((lambda)^2)*exp(-mu - 2*lambda)
df = data.frame(x=mu, y=lambda, z=likelihood)
df[which.max(df$z), ]
(ggplot(df, aes(x=x, y=y, z=likelihood))
+ geom_point(aes(color=z))
+  stat_density2d())
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
?seq
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = seq(length.out= 1000, from=0, to=10)
lambda = seq(length.out = 1000, from=0, to=10)
likelihood = function(x, y) {
lh = (1/(factorial(5)*factorial(2)))*((x + y)^5)*((y)^2)*exp(-x - 2*y)
return(lh)
}
df = transform(x=mu, y=lambda, z=likelihood(mu, lambda))
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = seq(length.out= 1000, from=0, to=10)
lambda = seq(length.out = 1000, from=0, to=10)
likelihood = function(x, y) {
lh = (1/(factorial(5)*factorial(2)))*((x + y)^5)*((y)^2)*exp(-x - 2*y)
return(lh)
}
df = transform(expand.grid(x=1:10,y=1:5),z=likelihood(mu, lambda))
(ggplot(df, aes(x=x, y=y, z=z))
+ geom_point(aes(color=z))
+  stat_contour())
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = seq(length.out= 1000, from=0, to=10)
lambda = seq(length.out = 1000, from=0, to=10)
likelihood = function(x, y) {
lh = (1/(factorial(5)*factorial(2)))*((x + y)^5)*((y)^2)*exp(-x - 2*y)
return(lh)
}
df = transform(expand.grid(x=1:10,y=1:5),z=likelihood(mu, lambda))
(ggplot(df, aes(x=x, y=y, z=z))
+  stat_contour()
+ geom_point(aes(color=z))
)
?rep
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = seq(length.out= 100, from=0, to=10)
lambda = seq(length.out = 100, from=0, to=10)
likelihood = function(x, y) {
lh = (1/(factorial(5)*factorial(2)))*((x + y)^5)*((y)^2)*exp(-x - 2*y)
return(lh)
}
df.mu = rep(mu, 100)
df.lambda = rep(lambda, each=100)
df.lh = likelihood(df.mu, df.lambda)
df = data.frame(mu=df.mu, lambda=df.lambda, lh=df.lh)
(ggplot(df, aes(x=mu, y=lambda, z=lh))
+  stat_contour()
+ geom_point(aes(color=z))
)
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
rm(list=ls())
mu = seq(length.out= 100, from=0, to=10)
lambda = seq(length.out = 100, from=0, to=10)
likelihood = function(x, y) {
lh = (1/(factorial(5)*factorial(2)))*((x + y)^5)*((y)^2)*exp(-x - 2*y)
return(lh)
}
df.mu = rep(mu, 100)
df.lambda = rep(lambda, each=100)
df.lh = likelihood(df.mu, df.lambda)
df = data.frame(mu=df.mu, lambda=df.lambda, lh=df.lh)
(ggplot(df, aes(x=mu, y=lambda, z=lh))
+  stat_contour()
+ geom_point(aes(color=lh))
)
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
+  stat_contour()
library(ggplot2)
rm(list=ls())
mu = seq(length.out= 100, from=0, to=10)
lambda = seq(length.out = 100, from=0, to=10)
likelihood = function(x, y) {
lh = (1/(factorial(5)*factorial(2)))*((x + y)^5)*((y)^2)*exp(-x - 2*y)
return(lh)
}
df.mu = rep(mu, 100)
df.lambda = rep(lambda, each=100)
df.lh = likelihood(df.mu, df.lambda)
df = data.frame(mu=df.mu, lambda=df.lambda, lh=df.lh)
(ggplot(df, aes(x=mu, y=lambda, z=lh))
+  stat_contour()
)
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
library(ggplot2)
library(grid)
library(gridExtra)
rm(list=ls())
mu = seq(length.out= 100, from=0, to=10)
lambda = seq(length.out = 100, from=0, to=10)
likelihood = function(x, y, W, B) {
lh = (1/(factorial(W)*factorial(B)))*((x + y)^W)*((y)^B)*exp(-x - 2*y)
return(lh)
}
df.mu = rep(mu, 100)
df.lambda = rep(lambda, each=100)
df.lh = likelihood(df.mu, df.lambda, W=5, B=2)
df.lh2 = likelihood(df.mu, df.lambda, W=3, B=4)
df = data.frame(mu=df.mu, lambda=df.lambda, lh=df.lh, lh2=df.lh2)
p1 = (ggplot(df, aes(x=mu, y=lambda, z=lh))
+  stat_contour()
+ labs("W = 5, B = 2")
)
p2 = (ggplot(df, aes(x=mu, y=lambda, z=lh2))
+  stat_contour()
+ labs("W = 3, B = 4")
)
grid.arrange(p1, p2, ncol=2)
source('~/Spring 2016/Stat 775/HW 2/Problem3.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question8.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
?rep
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
source('~/Spring 2016/Stat 775/HW 2/Question10.R')
